# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPainter
import serial
import time
from random import randint

import serial.tools.list_ports

#ser = serial.Serial("/dev/ttyACM0", 115200)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1023, 768)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.detectGun = QtWidgets.QPushButton(self.centralwidget)
        self.detectGun.setGeometry(QtCore.QRect(5, 5, 130, 25))
        self.detectGun.setObjectName("detectGun")

        self.detectGun.clicked.connect(self.list_guns)

        self.listGun = QtWidgets.QComboBox(self.centralwidget)
        self.listGun.setGeometry(QtCore.QRect(5, 35, 130, 25))
        self.listGun.setObjectName("listGun")

        self.testRum = QtWidgets.QPushButton(self.centralwidget)
        self.testRum.setGeometry(QtCore.QRect(5, 65, 130, 25))
        self.testRum.setObjectName("testRum")

        self.testRum.clicked.connect(self.test_rum)

        self.testSol = QtWidgets.QPushButton(self.centralwidget)
        self.testSol.setGeometry(QtCore.QRect(5, 95, 130, 25))
        self.testSol.setObjectName("testSol")

        self.testSol.clicked.connect(self.test_sol)

        self.testCam = QtWidgets.QPushButton(self.centralwidget)
        self.testCam.setGeometry(QtCore.QRect(5, 125, 130, 25))
        self.testCam.setObjectName("testCam")

        self.testCam.clicked.connect(self.test_cam2)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "openFIR testing GUI"))
        self.detectGun.setText(_translate("MainWindow", "detect guns"))
        self.testRum.setText(_translate("MainWindow", "test rumble"))
        self.testSol.setText(_translate("MainWindow", "test solenoid"))
        self.testCam.setText(_translate("MainWindow", "test camera"))

    def list_guns(self, MainWindow):
        print("List serial connections: ")
        ports = serial.tools.list_ports.comports()
        self.listGun.clear()
        for p in ports:
            print(p.device)
            self.listGun.addItem(p.device)
        print(self.listGun.currentText())

    def test_rum(self, MainWindow):
        print("testing rumble")
        ser = serial.Serial(self.listGun.currentText(), 115200)
        rumStr = "rum"

        if ser.isOpen():
            ser.write(rumStr.encode('ascii'))


    def test_sol(self, MainWindow):
        print("testing solenoid")
        ser = serial.Serial(self.listGun.currentText(), 115200)
        solStr = "sol"

        if ser.isOpen():
            ser.write(solStr.encode('ascii'))

    def test_cam(self, MainWindow):

        ser = serial.Serial(self.listGun.currentText(), 115200)
        camStr = "cam"
        i = 0

        if ser.isOpen():

            while (i < 25):
                ser.write(camStr.encode('ascii')) #send the string 'cam' to arduino to get it to send back 12 position points
                line = ser.readline().decode('utf-8').rstrip() #receive bytes to end of line from arduino, strip out formatting data
                my_list = line.split(",") #split byte data based on comma, and put into list
                res = [eval(i) for i in my_list] #turn bytes into int
                #print(my_list)
                test_list = [300,300,500,300,300,600,500,600,500,300,300,500] #test list of 12 coordinates
                print(test_list)
                #print(test_list[5])

                #draw 6 circles

                #drawEllipse(test_list[0],test_list[1],35,35)
                #drawEllipse(test_list[2],test_list[3],35,35)
                #drawEllipse(test_list[4],test_list[5],35,35)
                #drawEllipse(test_list[6],test_list[7],35,35)
                #drawEllipse(test_list[8],test_list[9],35,35)
                #drawEllipse(test_list[10],test_list[11],35,35)

                #drawLine(test_list[0],test_list[1],test_list[2],test_list[3]) #connect 1 to 2
                #drawLine(test_list[0],test_list[1],test_list[4],test_list[5]) #connect 1 to 3
                #drawLine(test_list[4],test_list[5],test_list[6],test_list[7]) #connect 3 to 4
                #drawLine(test_list[2],test_list[3],test_list[6],test_list[7]) #connect 2 to 4

                time.sleep(0.2)
                i = i + 1

        print("camera test done")


    def test_cam2(self, MainWindow):

        #ser = serial.Serial(self.listGun.currentText(), 115200)
        camStr = "cam"
        i = 0

        #if ser.isOpen():

        while (i < 10):
                #ser.write(camStr.encode('ascii')) #send the string 'cam' to arduino to ge>
                #line = ser.readline().decode('utf-8').rstrip() #receive bytes to end of l>
                #my_list = line.split(",") #split byte data based on comma, and put into l>
                #res = [eval(i) for i in my_list] #turn bytes into int
                #print(my_list)
            test_list = [randint(300,500),300,randint(300,500),300,randint(300,500),600,randint(300,500),600,randint(300,500),300,randint(300,500),500] #test list >

            print(test_list)
                #print(test_list[5])

                #draw 6 circles

                #drawEllipse(test_list[0],test_list[1],35,35)
                #drawEllipse(test_list[2],test_list[3],35,35)
                #drawEllipse(test_list[4],test_list[5],35,35)
                #drawEllipse(test_list[6],test_list[7],35,35)
                #drawEllipse(test_list[8],test_list[9],35,35)
                #drawEllipse(test_list[10],test_list[11],35,35)

                #drawLine(test_list[0],test_list[1],test_list[2],test_list[3]) #connect 1>
                #drawLine(test_list[0],test_list[1],test_list[4],test_list[5]) #connect 1>
                #drawLine(test_list[4],test_list[5],test_list[6],test_list[7]) #connect 3>
                #drawLine(test_list[2],test_list[3],test_list[6],test_list[7]) #connect 2>

            time.sleep(0.2)
            i = i + 1

        print("camera test2 done")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

